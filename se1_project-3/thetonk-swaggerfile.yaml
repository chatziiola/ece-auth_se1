---
openapi: 3.0.0
info:
  title: Wavelength algorithmic resources
  version: 4.2.0
  description: My implementation for the 3 algorithmic resources of Wavelength project (Lord have mercy)
  contact:
    name: Spyridon Baltsas
    email: mspyrido@ece.auth.gr
  license:
    name: No license for this abomination!

servers:
- url:  http://api.example.com:1337/api/v1

security:
  - ApiKeyAuth: []

paths:
  /feed/{user-id}:
    get:
      summary: Get user's feed
      operationId: getUserFeed
      parameters:
        - name: user-id
          in: path
          required: true
          description: User's identification number in system.
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Feed found sucessfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /getRecommendedUsers/{user-id}:
    get:
      summary: Get recommended users for the specific user
      operationId: getRecommended
      parameters:
        - name: user-id
          in: path
          required: true
          description: User's identification number in system.
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Recommended users found successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendedUsers'
        "401":
          $ref: '#/components/responses/Unauthorized'

  /searchMusicEntity:
    get:
      summary: Search for a music entity
      operationId: searchMusic
      parameters:
        - name: ID
          in: query
          schema:
            type: integer
            format: int64
        - name: date
          in: query
          schema:
            type: string
            format: date-time
        - name: type
          in: query
          schema:
            type: string
            enum: ["artist","song","playlist","album"]
        - name: keywords
          in: query
          schema:
            type: array
            items:
              type: string
        - name: name
          in: query
          schema:
            type: string
      responses:
        "200":
          description: "Music entities found"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MusicEntity'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Wavelength-Api-Key
  responses:
    Unauthorized:
      description: User is unauthorized, you need an API key to access this resource!
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedMessage'
      headers:
        X_Wavelength_Api_Key:
          schema:
            type: string
    NotFound:
      description: Resource not found
      content:
        appplication/json:
          schema:
            $ref: '#/components/schemas/NotFoundMessage'
  schemas:
    UnauthorizedMessage:
      type: object
      properties:
        message:
          type: string
          default: "You are unauthorized! You need an api key to log in"
        code:
          type: integer
          default: 401
      required:
        - message
        - code
    NotFoundMessage:
      type: object
      properties:
        message:
          type: string
          default: "Your requested resource is nowhere to be found! Perhaps try searching something else?"
        code:
          type: integer
          default: 404
      required:
        - message
        - code
    Feed:
      type: object
      properties:
        lastUpdated:
          type: integer
          format: int64
        posts:
          type: array
          items:
           $ref: '#/components/schemas/Post'
    RecommendedUsers:
      type: array
      items:
        type: integer
        format: int64
    Post:
      type: object
      properties:
        userID:
          type: integer
          format: int64
        postID:
          type: integer
          format: int64
        postReactions:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
        postComments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Reaction:
      type: object
      properties:
        authorID:
          type: integer
          format: int64
        value:
          type: string
          enum: ["laugh","cry","angry","love"]
    Comment:
      type: object
      properties:
        authorID:
          type: integer
          format: int64
        content:
          type: string
    MusicEntity:
      type: object
      properties:
        entity-id:
          type: integer
          format: int64
          example: 15
        name:
          type: string
          example: Yparxo
        entity-type:
          type: string
          enum:
            - song
            - album
            - artist
            - playlist
    Song:
      type: object
      properties:
        name:
          type: string
          example: To agalma
        duration:
          type: integer
          format: minutes-seconds
        entity-id:
          type: integer
          format: int64
        album:
          $ref: '#/components/schemas/Album'
    Album:
      type: object
      properties:
        name:
          type: string
          example: The Wall
        entity-id:
          type: integer
          format: int64
        genre:
          type: string
          enum:
            - rap
            - rock
            - laiko
            - classic
            - others
            - trash
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
        date:
          type: string
          format: year-month
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
    Artist:
      type: object
      properties:
        name:
          type: string
          example: Pink Floyd
        entity-id:
          type: integer
          format: int64
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
    Playlist:
      type: object
      properties:
        name:
          type: string
          example: My awesome playlist
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
        entity-id:
          type: integer
          format: int64
        creator-id:
          type: integer
          format: int64
          description: ID of the user who created this playlist

